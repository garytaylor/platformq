== README

This app is a blog application implemented using Rails 4.2.1 and ExtJS as the UI.

The code has been committed at micro intervals to enable the style of development to be seen. I typically use
the BDD approach which can be seen here.

Whilst the style of coding used here and even the design is well over the top for a simple blog application, this is
intentional and was chosen based on discussions about what is required for the role.
It didn't seem right to do a quicker and dirtier approach such as using rails templates to render HTML content
and clicking on links to change the page rendered etc...
I have also added the infrastructure for integration testing using selenium and page objects.  Again, over the top, but
demonstrates an approach which I use to ensure that during development the whole application can be tested to ensure
that things are not breaking which were not expected. If timescales / budget were tight and this was not required,
I would happily skip this and rely on the request specs to verify the API and manual testing to ensure the UI interacts
with the API correctly.

As well as the commit logs, I have kept some more details nodes in history.txt which explain my thinking whilst
developing this code.

The UI is now developed using ExtJS.  Whilst standard ExtJS styling can look nice anyway, I have done a custom component
for the blog list etc.. and no styling has been done on that at all, so the looks of the blog is very below standard.
However, what I am demonstrating is functionality and the implementation of that functionality.

There are a couple of shortcuts which I would not do in a production app, but due to time constraints I have had to do here.
These are :-

1. The current user is always the first user in the database - this is ok for test purposes but obviously not for a production app
2. I have disabled CSRF protection as I did not implement a way of getting the token to the javascript application.
3. The way I have integrated the ExtJS app is not ideal.  I have the framework in 'public' so it can be found at '/' and the custom app
    in app/assets/javascript/blog_app.  The reason for this is the sencha 'command' tools do not have the concept of the url stucture not
    being directly mapped to the file system, but the rails asset pipeline does.  This was the quickest way to implement this code.
    If I were developing with Rails and ExtJS 5 alot, I would write a gem to properly integrate it.  I could not find a gem at this point in time.


